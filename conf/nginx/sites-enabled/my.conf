upstream php7-handler{
	# server 127.0.0.1:9000;
	server unix:/run/php/php7.0-fpm.sock;

}


###############################################################################################
# forced https://ftp.hehaorong.vip redirect to ftp.hehaorong.vip
#
server{
	listen 443;
	listen [::]:443;
	server_name ftp.hehaorong.vip;


	return 302 ftp://ftp.hehaorong.vip;
}


#############################################################################################
# www web server(https) 
server {
	listen 443 default_server;
	listen [::]:443 default_server;

	server_name www.hehaorong.vip;


	root /var/www/html;
	#root /var/www/html/wordpress;
	index index.html index.php;

	location / {
		#try_files $uri $uri/ /index.php?$args;
		try_files $uri $uri/ =404;
	}
	
	#location ~ \.php$ {
        #        #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
        #        include fastcgi.conf;
        #        fastcgi_intercept_errors on; 
        #        fastcgi_pass unix:/var/run/php5-fpm.sock;
        #}   

        #location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        #        expires max;
        #        log_not_found off;
        #}   
}


###############################################################################################
# video server
#
server{
        listen 443;
        listen [::]:443;
        server_name video.hehaorong.vip;


	root /media/ntfs/video/temp;

	location /{
		try_files $uri $uri/ =404;
	}
}


#############################################################################################
# blog web server(https) 

server {
	listen 443;
	listen [::]:443;

	server_name blog.hehaorong.vip;

	# ssl on;
	# ssl_certificate /etc/ssl/certs/hehaorong.vip.cer;
	# ssl_certificate_key /etc/ssl/private/hehaorong.vip.key;

	root /var/www/wordpress;
	index index.html index.php;

        location = /favicon.ico {
                log_not_found off;
                access_log off;
        }

        location = /robots.txt {
                allow all;
                log_not_found off;
                access_log off;
        }

        location / {
                # This is cool because no php is touched for static content.
                # include the "?$args" part so non-default permalinks doesn't break when using query string
                try_files $uri $uri/ /index.php?$args;
        }

        location ~ \.php$ {
                #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
                include fastcgi.conf;
                fastcgi_intercept_errors on;
                fastcgi_pass php7-handler;
                fastcgi_buffers 16 16k;
                fastcgi_buffer_size 32k;
        }

        location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                expires max;
                log_not_found off;
        }
}


###############################################################################
# https://debug.hehaorong.vip
# debug test server
server {
	listen 443 ssl http2;
	#listen [::]:443 ssl http2;
	server_name debug.hehaorong.vip;

	#ssl_certificate /etc/ssl/certs/hehaorong.vip_certs.pem;
	#ssl_certificate_key /etc/ssl/private/hehaorong.vip_key.pem;

	root /root/html;
	index index.html;

	location /static {
		try_files $uri $uri/ =404;
	}
}



###############################################################################################
# gateone server
#
upstream gateone-handler{
	server localhost:8888;
	server unix:/tmp/gateone.sock;
}

server {
        listen 443;
        listen [::]:443;
        server_name lab.hehaorong.vip;

	#ssl on;
	#ssl_certificate /etc/ssl/certs/hehaorong.vip.cer;
	#ssl_certificate_key /etc/ssl/private/hehaorong.vip.key;

	location /{
            # printf "account:$(openssl passwd -crypt password)\n" > file_path
            # printf "embed:$(openssl passwd -crypt embed)\n" > /etc/nginx/.htpasswd_gateone
            auth_basic "Private Property";
            auth_basic_user_file /etc/nginx/.htpasswd_gateone;

	    #与GateOne中的port要一致
	    proxy_pass http://gateone-handler;

	    proxy_redirect off;
	    proxy_pass_header Server;
	    proxy_set_header Host $http_host;
	    proxy_set_header X-Real-IP $http_address;
	    proxy_set_header X-Scheme $scheme;

	    proxy_http_version 1.1;
	    proxy_set_header Upgrade $http_upgrade;
	    proxy_set_header Connection "upgrade";		
	}

}


#############################################################################################
# owncloud server (https) 

server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	server_name yun.hehaorong.vip;

	# ssl相关的介绍请参考: https://blog.csdn.net/vencent7/article/details/79190249

	#ssl_certificate /etc/ssl/certs/hehaorong.vip.cer;
	#ssl_certificate_key /etc/ssl/private/hehaorong.key;

	# Example SSL/TLS configuration. Please read into the manual of NGINX before applying these.
	#ssl_session_timeout 5m;
	#ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	#ssl_ciphers "EECDH+AES128:HIGH!aNULL:!MD5";
	
	# 向前加密(perfect forward secrecy), 加密密钥只是短暂性的,日后SSL密钥泄露旧内容也不会被破解
	# 使用方式, openssl生成pem, nginx里通过ssl_dhparam指定pem 
	# openssl dhparam -out dhparam.pem 2048

	ssl_dhparam /etc/nginx/sites-enabled/dhparam.pem;
	ssl_prefer_server_ciphers on;
	keepalive_timeout    70;

	# OSCP Stapling，客户端向CA获取吊销的证书列表、通过在线状态协议(OSCP)方式验证证书是否有效,由于
        # CA向CRL不断追加记录会导致该列表过大, 客户端访问会一直阻塞.OCSP Stapling就是讲查询OCSP接口的
	# 工作交给服务器来做，服务可以直接查询OCSP信息并将查询结果缓存起来, 当有客户端请求时服务器直接
	# 把证书和OCSP信息一同发给客户端, 从而避免客户端验证造成的阻塞问题.
	ssl_stapling on;
	ssl_stapling_verify on;

	# Add headers to serve security related headers
	# Before enabling Strict-Transport-Security headers please read into this topic first.
	#add_header Strict-Transport-Security "max-age=15552000; includeSubDomains";
	add_header X-Content-Type-Options nosniff;
	add_header X-Frame-Options "SAMEORIGIN";
	add_header X-XSS-Protection "1; mode=block";
	add_header X-Robots-Tag none;
	add_header X-Download-Options noopen;
	add_header X-Permitted-Cross-Domain-Policies none;

	# Path to the root of your installation
	root /var/www/owncloud/;

	location = /robots.txt {
		allow all;
		log_not_found off;
		access_log off;
	}

	# The following 2 rules are only needed for the user_webfinger app.
	# Uncomment it if you're planning to use this app.
	#rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
	#rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;

	location = /.well-known/carddav {
		return 301 $scheme://$host/remote.php/dav;
	}
	location = /.well-known/caldav {
		return 301 $scheme://$host/remote.php/dav;
	}

	# set max upload size
	client_max_body_size 512M;
	fastcgi_buffers 8 4K;                     # Please see note 1
	fastcgi_ignore_headers X-Accel-Buffering; # Please see note 2

	# Disable gzip to avoid the removal of the ETag header 
	# Enabling gzip would also make your server vulnerable to BREACH
	# if no additional measures are done. See https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=773332
	gzip off;

	# Uncomment if your server is build with the ngx_pagespeed module
	# This module is currently not supported.
	#pagespeed off;

	error_page 403 /core/templates/403.php;
	error_page 404 /core/templates/404.php;

	location / {
		rewrite ^ /index.php$uri;
	}

	location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
		return 404;
	}
	location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) {
		return 404;
	}

	location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\.php(?:$|/) {
		fastcgi_split_path_info ^(.+\.php)(/.*)$;
		include fastcgi_params;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		# necessary for owncloud to detect the contextroot https://github.com/owncloud/core/blob/v10.0.0/lib/private/AppFramework/Http/Request.php#L603
		fastcgi_param SCRIPT_NAME $fastcgi_script_name;
		fastcgi_param PATH_INFO $fastcgi_path_info;
		fastcgi_param HTTPS on;
		fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice
		fastcgi_param front_controller_active true;
		fastcgi_read_timeout 180; # increase default timeout e.g. for long running carddav/ caldav syncs with 1000+ entries
		fastcgi_pass php7-handler;
		fastcgi_intercept_errors on;
		fastcgi_request_buffering off; #Available since NGINX 1.7.11
	}

	location ~ ^/(?:updater|ocs-provider)(?:$|/) {
		try_files $uri $uri/ =404;
		index index.php;
	}

	# Adding the cache control header for js and css files
	# Make sure it is BELOW the PHP block
	location ~ \.(?:css|js)$ {
		try_files $uri /index.php$uri$is_args$args;
		add_header Cache-Control "max-age=15778463";
		# Add headers to serve security related headers (It is intended to have those duplicated to the ones above)
		# Before enabling Strict-Transport-Security headers please read into this topic first.
		#add_header Strict-Transport-Security "max-age=15552000; includeSubDomains";
		add_header X-Content-Type-Options nosniff;
		add_header X-Frame-Options "SAMEORIGIN";
		add_header X-XSS-Protection "1; mode=block";
		add_header X-Robots-Tag none;
		add_header X-Download-Options noopen;
		add_header X-Permitted-Cross-Domain-Policies none;
		# Optional: Don't log access to assets
		access_log off;
	}

	location ~ \.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg|map)$ {
		add_header Cache-Control "public, max-age=7200";
		try_files $uri /index.php$uri$is_args$args;
		# Optional: Don't log access to other assets
		access_log off;
	}
}


#############################################################################################
# gogs server (https) 
server {
	listen 443;
	listen [::]:443;

	server_name git.hehaorong.vip;

	#ssl on;
	#ssl_certificate /etc/ssl/certs/hehaorong.vip_certs.pem;
	#ssl_certificate_key /etc/ssl/private/hehaorong.vip_key.pem;

	location / {
		proxy_pass http://127.0.0.1:3000/;
		proxy_redirect off;
		proxy_set_header Host			$host;
		proxy_set_header X-Real-IP		$remote_addr;
		proxy_set_header X-Forwarded-For	$proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto	$scheme;
	}
}




